\chapter{Introduction}
\label{ch:intro}

% Databases / Transactions / In-Memory Databases / Key-Value Stores

Databases are an integral part in many areas such as accounting, trading, and
machine learning. While use cases may vary, databases are generally used to
manage large amounts of data fast and reliably. An important method to access
data in a database are \emph{transactions}. A transaction is a sequence of
operations on data that appears as a single atomic operation. Therefore, an
important factor in delivering the mentioned technologies is \emph{transaction
throughput}.

There are several ways to increase transaction throughput. One approach is to
hold large portions of data or even the entire database in fast volatile memory
as in \acp{MMDB}. In this case, recovery is crucial as all data in volatile
memory are lost in a crash. Therefore, recovery usually involves access to
non-volatile, yet slower storage media which impairs throughput.

Another approach to improve transaction throughput is to utilize multi-core
architectures by allowing transactions to execute concurrently. This way, an
incoming transaction does not have to wait until a running transaction
terminates. However, race conditions between concurrent transactions may result
in inconsistent data. Therefore, concurrent transactions must be isolated by
means of a dedicated \emph{concurrency control}. There are different
\emph{isolation levels} but only \emph{serializability} guarantees that no
sequence of concurrent transactions can yield inconsistent data. Although
desirable, serializability is often unsupported or discouraged due to
prohibitive performance overhead.

An important class of databases that often feature both in-memory operation and
concurrent transactions are \emph{\kvsp}. Unlike relational databases, a \kvs
consists of a single associative collection. Lacking query languages and data
schemas, \kvsp avoid a lot of overhead that may not be required in certain
circumstances.

% Byte-Addressable Non-Volatile Memory

Recent research suggests that byte-addressable \ac{NVM} with parameters close to
\ac{DRAM} will be available in the near future. Notable technologies currently
in research are \ac{PCM}, \ac{MRAM}, and 3D XPoint. It is suggested that, due to
their characteristics. these technologies are strong candidates for non-volatile
main memories. Commonly accepted terms for such memory are \ac{NVRAM} and
\ac{SCM}.

The integration of \ac{NVRAM} can have many implications on both operating
systems and applications. With projected densities higher than \ac{DRAM},
\ac{NVRAM} is suggested to replace disk storage in some cases. This could
significantly reduce recovery overhead in \acp{MMDB}. For one, databases would
no longer have to move their data from non-volatile storage to main memory, thus
enabling instant restarts. More importantly, persisting data would be faster by
multiple orders of magnitude.

% Motivation

Recent research indicates that NVRAM-resident \ac{MMDB} and \kvsp can achieve
higher transaction throughput than conventional systems. However, these works
still rely on non-serializable transactions and do not address the opportunity
to enable stronger isolation. Serializability is a desirable property to
guarantee data integrity and should not be traded in favor of performance. In
the end, \ac{NVRAM} could be an opportunity to satisfy both demands. Therefore,
this thesis aims to provide affordable serializable transactions by leveraging
the superior performance of \ac{NVRAM} over disks.

% Task

The task is to design and implement an in-memory key-value store that exploits
the benefits of upcoming non-volatile \ac{RAM} to enable fast serializable
transactions. For this purpose, an \ac{NVRAM}-aware multiversion concurrency
control protocol is implemented. In order to validate the approach and determine
the overhead of serializability, benchmarks are used to compare the key-value
store against non-serializable solutions.

% Overview

\paragraph{Overview}

After this introduction, the thesis proceeds with a domain analysis in the
fields of \ac{NVRAM} and \kvsp. Chapter \ref{ch:nvram} introduces \ac{NVRAM} and
discusses applications and challenges, whereas chapter \ref{ch:kvs} deals with
\kvsp and modern concurrency control protocols. Based on these insights, a
concept for an NVRAM-resident \kvs with serializable transactions is developed
in Chapter \ref{ch:concept}. The subsequent chapter presents selected details on
the prototypical implementation of the concept. Based on the implemented
prototype, the concept is evaluated by means of synthetic benchmarks in Chapter
\ref{ch:eval}. The \hyperref[ch:summary]{last chapter} provides a summary of
this thesis and gives an outlook onto future works in the field.

\paragraph{Terminology}

As of this writing there is no distinct consensus as to how byte-addressable
non-volatile memory should be referred to. This thesis exclusively uses term
\ac{NVRAM}. There are two reasons for this decision. For one, alternative terms
such as \ac{BPRAM} or \ac{PM} suggest that non-volatile memory is also
persistent which has ambiguous definitions and is not consistently used
\cite{volos2017whisper}. Another reason is that some terms such as \ac{SCM},
\ac{NVM}, and \ac{PM} may not reflect the property of bytewise addressing which
is central to these technologies. \ac{NVRAM} on the other hand, explicitly
denotes all of the desired properties.
