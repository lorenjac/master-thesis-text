The KVS resides entirely in main memory, that is, both volatile and non-volatile memory. According to the two-level store architecture, the KVS is partitioned into two sections: a volatile and a non-volatile section.

### Volatile

The volatile section only contains strictly volatile data, that is, losing these data in a crash can never affect the durable part of the database. Most importantly, that includes transaction control blocks and a transaction table.

\paragraph{Transaction Control Blocks}

From a software point of view, transactions can be modeled as a tuple of attributes that describe the current state of a transactional context. Typical attributes could be: 

* begin and end timestamps
* execution phase
* change sets

Throughout its lifetime, a transaction usually transitions through several execution phases. Beginning with an \code{active} state once a transaction has started, it may transition to \code{try_commit} upon commit and finally \code{committed} when it succeeds. Upon failure, a transaction could indicate a \code{failed} state. The concrete set of phases is left to the implementation.

Change sets are required to buffer all modifications that a transaction carries out. When a transaction commits all modifications are propagated to durable memory. There may be several different change sets depending on the type of operation, such as deleting or updating.

Transaction control blocks are volatile because a transaction interrupted by a crash would have to be rolled back to satisfy atomicity. Preventing or removing partially committed change sets is handled by recovery and NVRAM management.

\paragraph{Transaction Table}

In order to manage currently running transactions, each new transaction is placed inside a container. Especially with MVCC, transactions may need a way to inspect other transactions to detect conflicts. Since transactions run on different threads or cores, respectively, the container is a globally shared lookup table. In order to protect critical sections when accessing the table locking or lock-free append-only approaches could be used.
Completed transactions may not be automatically removed from the table but collected by garbage collector. The transaction table is volatile by implication as it only contains transaction control blocks which are explicitly volatile.

### Non-Volatile

The non-volatile section stores all data that are durable across restarts. It holds a control block, the index structure, and all data items mapped by the index.

\paragraph{Control Block}

The control block is used to store essential meta data and for locating the index after a restart. For that purpose, the control block is placed in a fixed position of the KVS' NVRAM region. Possible locations are the front or rear end of the memory region. The index can be found by storing an offset or pointer. Either way, the underlying system must provide a way to reuse or recover a previous memory mapping, so both location methods are sufficient.

\paragraph{Index}

The index implements the actual KVS paradigm by mapping keys to individual data items. Note that, due to MVCC, instead of mapping concrete data items, each key maps to a history of versions of that item. It is the core data structure of a KVS and accessed by all transactions concurrently. As such, the index is a strong contention point that is also very critical for the performance of the KVS. For that reason, selecting a suitable data structure is crucial. The domain analysis in Chapter \ref{ch:kvs-nvram} shows that many, if not most, KVS rely hash tables. Reasons are amortized constant access, well-known array-like allocation schemes, and comparably low complexity. B-trees or radix trees, on the other hand, are slower and optimized for disk storage which was shown to inappropriate for NVRAM. Therefore, this work opts for an index based on a hash table.

Operations on the index include adding, retrieving, and removing a key-value pair. To prevent inconsistencies through race conditions, access must be mutually exclusive. While locking can quickly become a bottleneck in read-dominated scenarios, non-blocking data structures are generally slower and more complex. Still, this work strives to use modern approaches such as lock-free variants of cuckoo hashing. The actual hashing method is an implementation detail.

\paragraph{Histories}

The index maps each key to a history of version of its designated data item. Before an operation on an item can begin, the MVCC algorithm has to determine which version of the item is visible to the requesting transaction. As a result, histories may be iterated frequently. Also multiple transactions may access the same history at a time, so there may be overlapping accesses. However, transactions never remove and only add new versions at the back of the history. Therefore, contention may be high but mostly read-only. In order to account for these characteristics, an array-like data structure may be the most appropriate choice as opposed to a list. Consecutive access in array is less likely to cause page faults and can benefit from hardware prefetching. Also array have simpler allocation patterns compared to lists. Problems arise when garbage collection which could perform random-access modifications to the history. Since garbage collection would break the scope of this work, it is assumed to absent or as non-invasive as possible.